<cloud-functions>
    <description>
        you are going to update an already-existing cloud-functions service for workout.
    </description>
    <code-instructions>
        use the best practices. Implement error handling. Have different types of logging:
        development,
        warnings, errors, info. Use http packages
        Take a look before at how users api is implemented and use that as a reference
    </code-instructions>
    <file-structure-instructions>
        <folders>
            an `api` folder is already created in services. It should contain all the folders and
            files related to the api. There is a folder for models, that contains the
            types to pass as a body to the request, and the output type.
        </folders>
        <files>
            For every new type of api there should be a different file(so, if the api is about users
            — user file, if the api is about workouts — workout file, etc.)
        </files>
    </file-structure-instructions>
    <functionality>
        <main-file>
            <f1> in the main file, there should be 4 functions(get, put, post, delete) to call with
                the following parameters: <parameter
                    name="fName" type="string" required="true" desc="name of the function to call" />
                <parameter
                    name="body" type="T" required="false" default="null" desc="the body to pass" />
                <parameter
                    name="auth" type="bool" required="false" default="true"
                    desc="wether to provide auth token in a header" /> and the following generic
                types: T — input data type and K — output data type. both of them should be descried
                in the model folder. </f1>
            <f2> the return from the function will be in the following form: {success: true, data:
                data}, {success: true, message: message} or {success: false, status: status_number,
                error: error_description, message:
                error_message} </f2>
            <f3> in case of successful return, the data should be parsed appropriate to the passed
                output type. </f3>
        </main-file>
        <generic-api>
            <f1>In every api file, there should be implemented methods that can be easily called
                from anywhere in the code</f1>
        </generic-api>
        <specific-api> This time, implement the following workout api: 
            <api route="getAllMyWorkouts"
                inputType="none" outputType="{ id: string, name: string?, muscleGroups: string[] }[]" auth="true" method="GET" />
            <api
                route="getMyWorkout" inputType="{ workoutId: string }"
                outputType="{
                                id: string,
                                name: string?,
                                exercises: {
                                    exerciseId: string,
                                    name: string,
                                    equipmentId: string?,
                                    muscleGroup: string,
                                    sets: {
                                        setNumber: int,
                                        reps: int,
                                        weight: double,
                                        time: int
                                    }[]
                                }[],
                                startTime: DateTime,
                                endTime: DateTime
                            }"
                auth="true"  method="GET"/>
            <api route="createWorkout" inputType="{
                                                    id: string,
                                                    name: string?,
                                                    exercises: {
                                                        exerciseId: string,
                                                        name: string,
                                                        equipmentId: string?,
                                                        muscleGroup: string,
                                                        sets: {
                                                            setNumber: int,
                                                            reps: int,
                                                            weight: double,
                                                            time: int
                                                        }[]
                                                    }[],
                                                    startTime: DateTime,
                                                    endTime: DateTime
                                                }"
                outputType="none" auth="true"
                comments="[if successful, returns success: true, otherwise success: false]" method="POST" />
                <api
                route="deleteWorkout" inputType="workoutDelete" outputType="none" auth="true"
                method="DELETE" />
        </specific-api>
    </functionality>
    <packages>
        use dio package for https
    </packages>
</cloud-functions>